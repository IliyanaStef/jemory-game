{"version":3,"sources":["components/ImageCard/ImageCard.js","components/Header/Header.js","components/Wrapper/Wrapper.js","components/ScoreBar/index.js","App.js","index.js"],"names":["ImageCard","props","react_default","a","createElement","className","onClick","imageClick","src","image","alt","id","width","Header","title","desc","rules","Wrapper","children","ScoreBar","score","App","state","images","clickedImages","shuffleCards","array","sort","b","Math","random","event","console","log","target","currentImage","_this","indexOf","alert","setState","concat","_this2","this","components_Header_Header","components_ScoreBar","components_Wrapper_Wrapper","map","components_ImageCard_ImageCard","key","imageURL","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"g8CAWeA,SARG,SAAAC,GAAK,OACnBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAASL,EAAMM,YACjCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKI,IAAKP,EAAMQ,MAAOC,IAAKT,EAAMU,GAAIN,UAAU,iBAAiBO,MAAM,aCIpEC,SAPA,SAAAZ,GAAK,OAChBC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,6BACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yBAAyBJ,EAAMa,OAC7CZ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAoBJ,EAAMc,KAAKb,EAAAC,EAAAC,cAAA,WAAMH,EAAMe,UCMjDC,SATC,SAAAhB,GAAK,OACjBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACVJ,EAAMiB,aCGJC,SANE,SAAAlB,GAAK,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACXH,EAAAC,EAAAC,cAAA,oBAAYH,EAAMmB,iBC8EXC,oNA1EXC,MAAQ,CACJC,SACAC,cAAe,GACfJ,MAAO,KAIXK,aAAe,SAAAC,GAEX,OADAA,EAAMC,KAAK,SAACxB,EAAGyB,GAAJ,MAAU,GAAMC,KAAKC,WACzBJ,KAIXnB,WAAa,SAAAwB,GACTC,QAAQC,IAAIF,EAAMG,QAClB,IAAMC,EAAeJ,EAAMG,OAAOxB,IACX0B,EAAKd,MAAME,cAAca,QAAQF,IAAiB,GAIrEG,MAAM,aACNF,EAAKG,SAAS,CACVhB,OAAQa,EAAKX,aAAaF,GAC1BC,cAAe,GACfJ,MAAO,KAIXgB,EAAKG,SACD,CACIhB,OAAQa,EAAKX,aAAaF,GAC1BC,cAAeY,EAAKd,MAAME,cAAcgB,OAAOL,GAC/Cf,MAAOgB,EAAKd,MAAMF,MAAQ,GAG9B,WAC6B,KAArBgB,EAAKd,MAAMF,QACXkB,MAAM,YACNF,EAAKG,SAAS,CACVhB,OAAQa,EAAKX,aAAaF,GAC1BC,cAAe,GACfJ,MAAO,gFAQtB,IAAAqB,EAAAC,KACL,OACIxC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACuC,EAAD,CACI7B,MAAM,QACNC,KAAK,wDACLC,MAAM,sFAEVd,EAAAC,EAAAC,cAACwC,EAAD,CAAUxB,MAAOsB,KAAKpB,MAAMF,QAC5BlB,EAAAC,EAAAC,cAACyC,EAAD,KAEKH,KAAKpB,MAAMC,OAAOuB,IAAI,SAAArC,GAAK,OACxBP,EAAAC,EAAAC,cAAC2C,EAAD,CACIxC,WAAYkC,EAAKlC,WACjBI,GAAIF,EAAME,GACVqC,IAAKvC,EAAME,GACXF,MAAOA,EAAMwC,sBAlEvBC,cCHlBC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.228f19e6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ImageCard.css\";\r\n\r\nconst ImageCard = props => (\r\n    <div className=\"card\" onClick={props.imageClick}>\r\n        <div className=\"img-container\">\r\n            <img src={props.image} alt={props.id} className=\"img-responsive\" width=\"100%\" />\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default ImageCard;","import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = props => (\r\n    <header className=\"jumbotron jumbotron-fluid\">\r\n        <h1 className=\"display-3 text-center\">{props.title}</h1>\r\n        <p className=\"lead text-center\">{props.desc}<br/>{props.rules}</p>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => (\r\n    <div className=\"container\">\r\n        <div className=\"wrapper\">\r\n            {props.children}\r\n        </div>\r\n    </div>\r\n);\r\n\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./ScoreBar.css\";\r\n\r\nconst ScoreBar = props => (\r\n    <div className=\"score-bar text-center\">\r\n        <h3>SCORE: {props.score}</h3>\r\n    </div>\r\n);\r\n\r\nexport default ScoreBar;","import React, { Component } from \"react\";\nimport ImageCard from \"./components/ImageCard\";\nimport Header from \"./components/Header\";\nimport Wrapper from \"./components/Wrapper\";\nimport ScoreBar from \"./components/ScoreBar\";\nimport images from \"./images.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n    state = {\n        images,\n        clickedImages: [],\n        score: 0\n    };\n\n    // method for randomly sorting the images array\n    shuffleCards = array => {\n        array.sort((a, b) => 0.5 - Math.random());\n        return array;\n    };\n\n    // method for handling image click events\n    imageClick = event => {\n        console.log(event.target);\n        const currentImage = event.target.alt;\n        const alreadyClicked = this.state.clickedImages.indexOf(currentImage) > -1;\n\n        // if you click on an image more than once, you lose and the score resets to 0, the clickedImages are reset, and the images reshuffle\n        if (alreadyClicked) {\n            alert(\"You lost!\");\n            this.setState({\n                images: this.shuffleCards(images),\n                clickedImages: [],\n                score: 0\n            });\n        } else {\n            // else you score a point, the selected image is stored in the clickedImages array, and the images reshuffle\n            this.setState(\n                {\n                    images: this.shuffleCards(images),\n                    clickedImages: this.state.clickedImages.concat(currentImage),\n                    score: this.state.score + 1\n                },\n                // function that's called when you win the game; resets values\n                () => {\n                    if (this.state.score === 12) {\n                        alert(\"You win!\");\n                        this.setState({\n                            images: this.shuffleCards(images),\n                            clickedImages: [],\n                            score: 0\n                        });\n                    }\n                }\n            );\n        }\n    };\n\n    render() {\n        return (\n            <div> \n                <Header \n                    title=\"AMORY\" \n                    desc=\"Anime Memory Game. Click on an image to earn a point.\"\n                    rules=\"Collect 12 points to win! If you click on an image twice you will loose the game.\" \n                />\n                <ScoreBar score={this.state.score} />\n                <Wrapper>\n                    {this.state.images.map(image => (\n                        <ImageCard \n                            imageClick={this.imageClick}\n                            id={image.id}\n                            key={image.id}\n                            image={image.imageURL}\n                        />\n                    ))}\n                </Wrapper>\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n\n"],"sourceRoot":""}